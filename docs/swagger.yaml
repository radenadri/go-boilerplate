definitions:
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        minLength: 3
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      updated_at:
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  request.UserLoginRequest:
    properties:
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        maxLength: 32
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: string
      errors:
        items:
          $ref: '#/definitions/response.ValidationError'
        type: array
      success:
        type: boolean
    type: object
  response.ValidationError:
    properties:
      field:
        type: string
      reason:
        type: string
      rule:
        type: string
      value:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - auth
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
swagger: "2.0"
